                                 SPRING MVC PROJECT:
                             -------------------------
Relative url : " url";
Absolute url :  " /url";

SETUP// Creating a spring mvc Project:

-> create a maven project with arctype as web-app
-> it creates a maven dynamic web project and if it shows any error in jsp page
-> configure build path of the tomcat server i.e add libraries of tomcat server
-> now add depenedency of spring mvc from maven rpeository into the web.xml file


Steps To configure Spring mvc Project:
---------------------------------------

Step 1: Configure the dispatcher Servlet


  <servlet>
     <servlet-name>spring</servlet-name>
     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  </servlet>
  
  <servlet-mapping>
     <servlet-name>spring</servlet-name>
     <url-pattern>/</url-pattern>
  </servlet-mapping>

-> it basically tells which url request to handle

Step 2: create a spring configuration file

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd">
  
   
  <context:component-scan base-package="springmvc.controller"/>
  
  <bean class ="org.springframework.web.servlet.view.InternalResourceViewResolver" name = "viewResolver">
  <property name="prefix" value = "/WEB-INF/views/"  />
  <property name ="suffix" value =".jsp"></property>
  
  </bean>

</beans>

Step 3: Configure View Resolver


  <bean class ="org.springframework.web.servlet.view.InternalResourceViewResolver" name = "viewResolver">
  <property name="prefix" value = "/WEB-INF/views/"  />
  <property name ="suffix" value =".jsp"></property>

Step 4: Create a controller

Step 5: create a view to show(jsp page)



                      Sending Data from Controller to view : 
              ---------------------------------------------------

-> this can be done by two ways
    1. Model 
    2. ModelAndView

Model: 
-------


Methods:

-> addAttribute(String Key, Object value);

-> Object can be any thing int,collection,userdefineobject

EG:
Controller:

	@RequestMapping("/home")
	public String home(Model model)
	{
		System.out.println("printing");
		model.addAttribute("name","Rahul Reddy");
		model.addAttribute("id", 2000);
		return "index";

	
//		List <String> friends = new ArrayList<String>();
//		friends.add("varun");
//		friends.add("kumar");
//		model.addAttribute("f",friends);
//	
		
	}

JSP page:

<h1> this is home page</h1>

<%
  String name = (String)request.getAttribute("name");
  int id = (Integer)request.getAttribute("id");
  // List<>= (List<String>)request.getAttribute("f");
%>
<h1>name is <%=name %></h1>
<h1>Id is <%=id %></h1>

<% for(String s:friends){
%>
<h1> <% = s %> </h1>





ModelAndView:
-------------

Method:

-> addObject(String key, Object value)

-> Object can be any thing int,collection,userdefinedobject

eg:

@RequestMapping("/help")
	public ModelAndView help()
	{
	
		ModelAndView modelandview = new ModelAndView();
		
		modelandview.addObject("name","varun");
		modelandview.addObject("id",2222);
		
		modelandview.setViewName("help");
		
		return modelandview;
	}
	
	

jsp page:

<%
String name = (String)request.getAttribute("name");
int id = (Integer)request.getAttribute("id");

%>
<h1> this is help page</h1>
<h1> name is <%=name %></h1>
<h2> id is <%=id %></h2>

</body>

-------------------------------------------------------
                        JSP Expression Language:
                      --------------------------------

-> Add jstl library for traversing

-> and add <@ taglib prefi="c" .....>
   from net

-> we can print values in jsp page without using request.getAttribute by simply
   using 

** <%@ page isELIgnored = "false" %>

and using: ${name }

Eg:

<%@ page isELIgnored = "false" %>

<h1> this is help page</h1>
<h1> name is <%--<%=name %> --%>  ${name }</h1>
<h2> id is <%--<%=id %> --%> ${id }</h2>

<c:forEach var ="items" items ="${marks }">

<h1> ${items }
</h1>

</c:forEach>

</body>



                 Sending Data from view to Controller: 
               ------------------------------------------

->** always give relative path in form action
   ie. action = "processform"   not : action = "/processform"


-> in order to send data from view to controller we use @RequestParam("viewparametername") String variable

ex:

Controller:


	@RequestMapping("/login")
	public String login()
	{
		return "login";
	}
	
	@RequestMapping(path="/processform",method=RequestMethod.POST)
	public String processform(@RequestParam("fname") String fname,
			                  @RequestParam("mail") String mail,
			                  @RequestParam("password") String password,
			                  Model model)
	{
		System.out.println(fname);
		System.out.println(mail);
		System.out.println(password);
		
		model.addAttribute("name", fname);
		model.addAttribute("mail",mail);
		model.addAttribute("password",password);
		return "success";
	}

Login page:

<form action="processform" method="post" >
       <label for= "fname">FirstName:</label><br>
       <input type = "text" id = "fname" name = "fname"><br>
       
        <label for= "fname">mail id:</label><br>
       <input type = "text" id = "mail" name = "mail"><br>
       
        <label for= "fname">Password:</label><br>
       <input type = "text" id = "password" name = "password"><br>
       
       <input type ="submit" value ="submit">
       
       </form>

Success page:

<h1> Thankyou for logging in</h1>

<p> yourr name is ${fname }</p>
<p> your email is ${mail }</p>
<p> your password is ${password  }</p>

---------------------------------------------------------------------
Without Model Attribute:
---------------------------

1. --> we need to get all the parameters from form to controller using @RequestParam
2. --> then we need to create an object for entity class(model) to store all the data coming
       from view 
3. ---> then we need to create a model object to add all the parameters of the view page 
        to access them in another view page

** and a entity class with getter and setters

EG:
@RequestMapping("/login")
public String login()
{
	return "login";
}

@RequestMapping(path="/processform",method=RequestMethod.POST)
public String processform(@RequestParam("fname") String fname,
		                  @RequestParam("mail") String mail,
		                  @RequestParam("password") String password,
		                  Model model)
{
//	System.out.println(fname);
//	System.out.println(mail);
//	System.out.println(password);
	
	User user = new User();
	user.setFname(fname);
	user.setMail(mail);
	user.setPassword(password);
	
//	model.addAttribute("name", fname);
//	model.addAttribute("mail",mail);
//	model.addAttribute("password",password);
	
	model.addAttribute(user);
	return "success";
}

Jsp page:

<h1> Thankyou for logging in</h1>

<p> yourr name is ${user.fname }</p>
<p> your email is ${user.mail }</p>
<p> your password is ${user.password  }</p>


                       @ModelAttribute:
                      ---------------------

-> can be used in two ways:

Use 1:
--------
-> but now with @ModelAttribute:

-> here @ModelAttribute 
     -> replaces the @RequestParam for fetching data
     -> and it  stores data of view in entity object
     -> and it adds the entity object to Model which then can be accessed in view pages

Controller :

@RequestMapping(path="/processform",method=RequestMethod.POST)
	public String processform(@ModelAttribute User user,
			                  Model model)
	{
        
		return "success";
	}

Jsp page:

<h1> Thankyou for logging in</h1>

<p> yourr name is ${user.fname }</p>
<p> your email is ${user.mail }</p>
<p> your password is ${user.password  }</p>

Model:

create a model class with same names as of view page to map and store it in model class


USE 2:
-------
-> Here with the help of @ModelAttribute we can use the common values in any methods:

eg:


	@ModelAttribute
	public void common(Model m)
	{
		m.addAttribute("Header","these is LoginPage");
		m.addAttribute("Desc","these is description page");
	}
	
	
	@RequestMapping("/login")
	public String login(Model m)
	{
//		m.addAttribute("Header","these is LoginPage");
//		m.addAttribute("Desc","these is description page");
		
		return "login";
	}
	
	@RequestMapping(path="/processform",method=RequestMethod.POST)
	public String processform(@ModelAttribute User user,
			                  Model model)
	{

       System.out.println(user);
		

		return "success";
	}

Jsp Pages:

login:

<h1>${Header}</h1>
<p> ${Desc }</p>
<form action="processform" method="post" >
       <label for= "fname">FirstName:</label><br>
       <input type = "text" id = "fname" name = "fname"><br>
       
        <label for= "fname">mail id:</label><br>
       <input type = "text" id = "mail" name = "mail"><br>
       
        <label for= "fname">Password:</label><br>
       <input type = "text" id = "password" name = "password"><br>
       
       <input type ="submit" value ="submit">
       
       </form>

Succes:;

<body>
<h1> Thankyou for logging in</h1>
<hr>
<h1> ${Header}</h1>
<p> ${Desc }</p>

<p> yourr name is ${user.fname }</p>
<p> your email is ${user.mail }</p>
<p> your password is ${user.password  }</p>

</body>

-> here we only created Header an Desc in common method using @Model Attribute and accessed
   it in evry method




-----------------------------------------------------------------------------------------

                                    Redirect : 
                              ---------------------

1. redirect prefix:
2. RedirectView:

redirect prefix:
-----------------

when you want to redirect from one url to another mainly used for displaying error pages and 
success pages:

EG:

return "redirect:/url";


@controller
public class contoller{

@ReguestMapping("/one")
publicc string one(){
s.o.pln("this is first");

return "redirect:/enjoy";
}

-> this takes you to where you want to go by using redirect

@RequestMapping("/enjoy")
public String two(){

S.o.pln("this is two ");

return " ";
}

}

-> We can also redirect by using Redirectview:


Eg:


@controller
public class contoller{

@ReguestMapping("/one")
publicc string one(){
s.o.pln("this is first");

RedirectView redirectview = new RedirectView();
redirectview.setUrl("enjoy");
return redirectview

}

-> this takes you to where you want to go by using redirect

@RequestMapping("/enjoy")
public String two(){

S.o.pln("this is two ");

return " ";
}

}












____________________________________________________________________________________________________________________________________


Spring Web Annotations:
------------------------


1. @RequestMapping:

@Controller
@RequestMapping(value = "/vehicles", method = RequestMethod.GET)
class VehicleController {

    @RequestMapping("/home")
    String home() {
        return "home";
    }
}

-> Moreover, @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, and @PatchMapping 
   are different variants of @RequestMapping with the HTTP method already set to
    GET, POST, PUT, DELETE, and PATCH respectively.



2. @RequestBody

->  @RequestBody – which maps the body of the HTTP request to an object:

@PostMapping("/save")
void saveVehicle(@RequestBody Vehicle vehicle) {
    // ...
}

3. @Pathvariable


4.@RequestParam:

-> We use @RequestParam for accessing HTTP request parameters:

@RequestMapping
Vehicle getVehicleByParam(@RequestParam("id") long id) {
    // ...
}

-> It has the same configuration options as the @PathVariable annotation.

-> In addition to those settings, with @RequestParam we can specify an
   injected value when Spring finds no or empty value in the request. 
   To achieve this, we have to set the defaultValue argument.

Providing a default value implicitly sets required to false:

@RequestMapping("/buy")
Car buyCar(@RequestParam(defaultValue = "5") int seatCount) {
    // ...
}

-> Besides parameters, there are other HTTP request parts we can access:
   cookies and headers. We can access them with the annotations 
   @CookieValue and @RequestHeader respectively.

We can configure them the same way as @RequestParam.


5. . @ResponseBody

-> If we mark a request handler method with @ResponseBody, Spring treats
   the result of the method as the response itself:

@ResponseBody
@RequestMapping("/hello")
String hello() {
    return "Hello World!";
}

-> If we annotate a @Controller class with this annotation, all 
   request handler methods will use it.


6. @ExceptionHandler

-> With this annotation, we can declare a custom error handler method.
   Spring calls this method when a request handler method throws any 
   of the specified exceptions.

-> The caught exception can be passed to the method as an argument:

@ExceptionHandler(IllegalArgumentException.class)
void onIllegalArgumentException(IllegalArgumentException exception) {
    // ...
}


7. @ModelAttribute

-> With this annotation we can access elements that are already in 
   the model of an MVC @Controller, by providing the model key:


@PostMapping("/assemble")
void assembleVehicle(@ModelAttribute("vehicle") Vehicle vehicleInModel) {
    // ...
}

Like with @PathVariable and @RequestParam, we don't have to specify the model key if the argument has the same name:

@PostMapping("/assemble")
void assembleVehicle(@ModelAttribute Vehicle vehicle) {
    // ...
}

Besides, @ModelAttribute has another use: if we annotate a method with it, Spring will automatically add the method's return value to the model:

@ModelAttribute("vehicle")
Vehicle getVehicle() {
    // ...
}

-> 

@ModelAttribute
Vehicle vehicle() {
    // ...
}
Before Spring calls a request handler method, it invokes all @ModelAttribute annotated methods in the class.

8.  @CrossOrigin
------------------
@CrossOrigin enables cross-domain communication for the annotated request handler methods:

@CrossOrigin
@RequestMapping("/hello")
String hello() {
    return "Hello World!";
}
If we mark a class with it, it applies to all request handler methods in it. 


-----------------------------------------------------------------------------------------

                       Spring MVC: @RequestMapping.

-> the annotation is used to map web requests to Spring Controller methods.




---------------------------------------------------------------------------------------
                            @RequestParam / @pathvariable

-> While @RequestParams extract values from the query string, @PathVariables 
    extract values from the URI path:


@GetMapping("/foos/{id}")
@ResponseBody
public String getFooById(@PathVariable String id) {
    return "ID: " + id;
}
Then, we can map based on the path:

http://localhost:8080/foos/abc
----
ID: abc


And for @RequestParam, it will be:

@GetMapping("/foos")
@ResponseBody
public String getFooByIdUsingQueryParam(@RequestParam String id) {
    return "ID: " + id;
}
Which would give us the same response, just a different URI:

http://localhost:8080/foos?id=abc

-> Both @RequestParam and @PathVariable can be optional.
 i.e

 @GetMapping({"/myfoos/optional", "/myfoos/optional/{id}"})
@ResponseBody
public String getFooByOptionalId(@PathVariable(required = false) String id){
    return "ID: " + id;
}
----
ID: abc

---------------------------------------------------------------------------------------------------------------------

                                        @ModelAttribute:

-> @ModelAttribute can be used either as a method parameter or at the method level.
-> 

At the Method Level

-> When the annotation is used at the method level it indicates the purpose of that method
   is to add one or more model attributes. Such methods support the same argument types 
   as @RequestMapping methods but that cannot be mapped directly to requests.

Let's have a look at a quick example here to start understanding how this works:

@ModelAttribute
public void addAttributes(Model model) {
    model.addAttribute("msg", "Welcome to the Netherlands!");
}

->In the example, we show a method that adds an attribute named msg to all models defined in the controller class.

-> In general, Spring-MVC will always make a call first to that method, before it calls any request
   handler methods. That is, @ModelAttribute methods are invoked before the controller methods 
   annotated with @RequestMapping are invoked. The logic behind the sequence is that, the model object 
   has to be created before any processing starts inside the controller methods.

-> It is also important that you annotate the respective class as @ControllerAdvice. Thus, you can add 
   values in Model which will be identified as global. This actually means that for every request a 
    default value exists, for every method in the response part.

 






























