               JAVASCRIPT:
         --------------------------

** fn + f12 opens debugger menu inn browser.

-> we can write js in html file by using script tag: 

    Eg:
<script>  
var x = 10;  
var y = 20;  
var z=x+y;  
document.write(z);  
</script> 

-> we can also write js in external file : by using src by linking it.

Eg:

 <script src= "index2.js"></script>


VSCode Server:  http://127.0.0.1:51961/index.html
 
51961 is port number of live server
index.html is file name


Comments in javascript:
---------------------------

  Single line comment:  //
  Multiline comment : /*  */


-> JavaScript Can Change HTML Content
    1. getElementById() : document.getElementById("demo").innerHTML = "Hello JavaScript";
      and html page should have a tag with id demo.

Java script display possibilities:
----------------------------------

JavaScript can "display" data in different ways:

-> Writing into an HTML element, using innerHTML.
   i.e document.getElementById(""demo").innerHTML=

->  Writing into the HTML output using document.write().

-> Writing into an alert box, using window.alert().

-> Writing into the browser console, using console.log().

-> Using document.write() after an HTML document is loaded, will delete all existing HTML:

-> In JavaScript, the window object is the global scope object, that
    means that variables, properties, and methods by default belong  
     to the window object






---------------------------------------------------------------------------------
Javascript Variables: There are two types of js variables i.e local and global:
--------------------

JavaScript is a dynamic type language, means you don't need to specify type 
of the variable because it is dynamically used by JavaScript engine. You need
 to use var here to specify the data type.

But in case of string we need to :

   var name ="rahul";
   var a =40;

Local Variable : these variables are defined within the block or function and accessed
                 with that block.

example:

<script>  
function abc(){  
var x=10;//local variable  
}  
</script>  

Global Variable: A JavaScript global variable is accessible from any function. A variable
                 i.e. declared outside the function or declared with window object 
                 is known as global variable. For example:

Example:  

<script>  
var data=200;//gloabal variable  
function a(){  
document.writeln(data);  
}  
function b(){  
document.writeln(data);  
}  
a();//calling JavaScript function  
b();  
</script>  


** In order to declare global varible within the function we use window.object:

Example:

function m(){  
window.value=100;//declaring global variable by window object  
}  
function n(){  
alert(window.value);//accessing global variable from other function  
}  


Java script provides different data types:

1. Primitive data type
2. Non-primitive (reference) data type

Primitive data type:
-------------------

String	  :  sequence of characters e.g. "hello"
Number	  :  numeric values e.g. 100
Boolean	  :  boolean value either false or true
Undefined :  represents undefined value
Null	  :  null i.e. no value at all


 Non-primitive (reference) data type:
-------------------------------------

Object	: instance through which we can access members
Array	: group of similar values
RegExp	: regular expression

************************************************************************
  Objects Creation/ Function/Function Comstructor:
      -------------------------------------
** how to create an object in java:
  var person = {
                 name :"rahul",
                 age :20,
                 address : " sbh colony"
               }

*** how to create multiple objects:

 var person1 = {
                 name :"rahul",
                 age :20,
                 address : " sbh colony"
               }
 var person2 = {
                 name :"varun",
                 age :22,
                 address : "kk"
               }
 var person3 = {
                 name :"sai",
                 age :24,
                 address : "kkknn"
***               }
****
  -> this is how to create multiple objects using functions

    function  Person(name , age, address)
   {
        var newObject = { }; --> we create an object same
      newObject.name = name;  --> we add properties to object
      newObject.age = age;
      newObject.address = address;
        return newObject;--> we return an object.
    }

 var Person1 = Person("rahul,22,"sbhcolony");
 var Person2 = Person("varun", 24,"fdfsdf");

 -> here basically we are creatinng an function which creates
   objects and return them so if we want an object we call the function 
   by sendng necessary parameters and in return we get an object.

 

**** But we have an another way which eases the creatio of
      multiple objects by using constructor function.


    function Person(name,age,address)
     {
       this.age = age;
       this.name = name;
       this.address = address;
     }

  var Person1 = new Person("rahul",22,"sbh colony");
  var Person2 = new Person("varun",23,"hdfsjjhds");


-> these is how a constructor function works
-> we create a constructor function with default propert templtae
-> and when we need an object of such template
-> we just use var person1 = new Person(parameters)
 

******************
-->  Constructor function is like a blue print to create an objects
      -> constructor function can also have functions, strings, etc in it
      -> but traditionally we use classes to create an object, but classes concept is
         not present in js
      -> so we use constructor fnction so when we create an constructor function we can
        use it as blueprint for creating objects
     -> trafitionally if we create an object with class we get instance of class
        i.e if we create an two objects of class and the class has method it creates an 
            function and two objects can refer to same copy function
     -> but in case of js constructor function every object has its own function object
     -> if we create 1000 objects of construtor function we also will have 
        1000 function obhects each object is referred to one object.


***********************************************************************************

                      Protoype:
                   ------------------

-> In js everything is an object
-> function is also an object
-> when we create an fuction in js ,js emgine creates two objects
-> one is function object and another one is prototype object
-> we can access function object by using function name in cosole
-> we can access the prototype object by using functionname.prototype.
->*** evry time we create a function engine creates an function object and prototype
       object
      -> and function object has a property prototype which is refffered to prototype 
         object. i.e functionname.prototype 
***
      -> now we want to create an object of function foo();
      -> we do it by var obj =  new foo();
      -> now we have an obj.
      -> the obj has property __proto__ which refers to the prototype object created for function
      -> now if we create an another object of foo()
      -> i.e var obj2 = new foo();
      -> this obj has an property __proto__ refers to same prototype object.

ex: 
    function myfunction() { };
 
   -> basically this creates two objects 1. myfunction object
                                         2. prototype object
   -> now how can we access prototype object.
   -> simple we have a property in myfunction i.e prototype which links to prototypeobject.
            i.e myfunction.prototype

   -> now we want to create an obj of myfunction 
         i.e var obj = new myfunction() ;
   -> so we get an object i.e obj.
   -> here obj has property __proto__ which refers to the prototype object
     
        i.e myfunction.prototype = obj.__proto__

  -> now when we search for property in obj 
  -> javsscript first searches in obj  and then moves to __proto___ obj ans searches there
  > if it is present in __proto__ obj js displays it.


  



---------------------------------------------------------------------------------
                              JS Objects:
                         -----------------
-> java script object is collection of unordered properties.

-> js object: 

var person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};

-> accessing object properties:
   person.lastName;

ex 2:

-> var person = {
  firstName: "John",
  lastName : "Doe",
  id     :  5566
};

document.getElementById("demo").innerHTML =
person["firstName"] + " " + person["lastName"];

-> an object can also have methods in it:
 eg: 
   
  var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

   Methods in object can be accessed by : name = person.fullName();

   document.getElementById("demo").innerHTML = person.fullName();

->  *** When a JavaScript variable is declared with the 
        keyword "new", the variable is created as an object:

*****
Object Constructors:// constructor function:
  -----------------------------------------

-> some times we need bluprint for creating many objects of same type.

->The way to create an "object type", is to use an object constructor function.

Eg: 

 -> first we have create an constructor function 
      synatx: function Person(parameters)
                    {
                    }
  
 -> then we can create a multiple objects of type person.
   i.e var father = new Person(arguments);

 -> and we can access them by  father.age 

eg: 


// Constructor function for Person objects

function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

// Create two Person objects

var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");

// Display age

document.getElementById("demo").innerHTML =
"My father is " + myFather.age + ". My mother is " + myMother.age + "."; 

</script>

----------------

-> Now adding a property to an object:
-----------------------------

** we cannot directly add a property to object constructor function but we an add property to 
  it to the object i.e which implenets it
  eg: 

  
<script>

function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");


myFather.nationality = "English";


document.getElementById("demo").innerHTML =
"My father is " + myFather.nationality; 
</script>

o/p: My father is English

->Adding method to Object :
   -------------------

eg:

function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");

myFather.name = function() {
  return this.firstName + " " + this.lastName;
};

document.getElementById("demo").innerHTML =
"My father is " + myFather.name();  
   

***
 You cannot add a new method to an object constructor 
   the same way you add a new method to an existing object.
***
Adding methods to an object constructor must be done 
  inside the constructor function:

 
Object Prototype:
 ------------------

-> *** All JavaScript objects inherit properties and methods from a prototype.


Prototype Inheritance: 
  ---------------

All JavaScript objects inherit properties and methods from a prototype:

-> Date objects inherit from Date.prototype
-> Array objects inherit from Array.prototype
-> Person objects inherit from Person.prototype
-> The Object.prototype is on the top of the prototype inheritance chain:

Date objects, Array objects, and Person objects inherit from Object.prototype.

Adding propertys and methofds directly to the Object constructor:
          ------------------------------------------
-> can be done with the help of prototype as all objects inherit from prototype:

Eg:

function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

Person.prototype.nationality = "English";

var myFather = new Person("John", "Doe", 50, "blue");

document.getElementById("demo").innerHTML =
"The nationality of my father is " + myFather.nationality; 
</script>


eg:2 

function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}

Person.prototype.name = function() {
  return this.firstName + " " + this.lastName;
};


***********  ECMAScript 5 added a lot of new Object Methods to JavaScript.
       -> i.e there are some methods we can use to add properties methods
              and some usecases we can use object methods 
        -> refer ECMA5 doc in w3 schools.


***

 Invoking a Function with a Function Constructor:
 
If a function invocation is preceded with the new keyword, it
   is a constructor invocation.

It looks like you create a new function, but since JavaScript 
 functions are objects you actually create a new object:

// This is a function constructor:
function myFunction(arg1, arg2) {
  this.firstName = arg1;
  this.lastName  = arg2;
}

// This creates a new object
var x = new myFunction("John", "Doe");
x.firstName;      

---------------------------------------------------------------------------

---------------------------------------------------------------
                   JS Function:
               -------------------------

-> A JavaScript function is a block of code designed to perform a particular task.

-> A JavaScript function is executed when "something" invokes it (calls it).

Eg:

 var x = myFunction(4, 3);   // Function is called, return value will end up in x

function myFunction(a, b) {
  return a * b;             // Function returns the product of a and b
}

output: 12:

-> we can store result of function in variable as well .

Eg: 2:

function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
}
document.getElementById("demo").innerHTML = toCelsius();

output: 35;

-> Using the example above, toCelsius refers to the
   function object, and toCelsius() refers to the function result.



Function Expression:
 -----------------


-> A JavaScript function can also be defined using an expression.

Eg: var x = myfunction(a,b) { return a*b};
    var z = x(4,3)
 o/p: 12


Self Invoking Function:  
  -------------------
Eg:

(function () {
  document.getElementById("demo").innerHTML = "Hello! I called myself";
})();


Arrow Functions: 
 -----------------

Arrow functions allows a short syntax for writing function expressions.

You don't need the function keyword, the return keyword, and the curly brackets.

eg;

var x = function(x, y) {
  return x * y;
}

// ES6
const x = (x, y) => x * y;


       Function Parameters:
       ------------------------

-> Function parameters are the names listed in the function defination:
-> function arguements are the real values passed to and from the function:

Parameter rules:
----------------

JavaScript function definitions do not specify data types for parameters.

JavaScript functions do not perform type checking on the passed arguments.

JavaScript functions do not check the number of arguments received.

The arguments Object:
 --------------------

-> js function have a built in object called argument object
> this object conains an array of the arguments.

eg:

 x = findMax(1, 123, 500, 115, 44, 88);

function findMax() {
  var i;
  var max = -Infinity;
  for (i = 0; i < arguments.length; i++) {
    if (arguments[i] > max) {
      max = arguments[i];
    }
  }
  return max;
}

or sum of aallinputs:
    -------------

x = sumAll(1, 123, 500, 115, 44, 88);

function sumAll() {
  var i;
  var sum = 0;
  for (i = 0; i < arguments.length; i++) {
    sum += arguments[i];
  }
  return sum;
}

Arguments are Passed by Value:
  --------------------------

  The parameters, in a function call, are the function's arguments.

JavaScript arguments are passed by value: The function only gets to know 
  the values, not the argument's locations.
**
If a function changes an argument's value, it does not change the 
  parameter's original value.

Changes to arguments are not visible (reflected) outside the function.


          Function Invocation: 
     ----------------------------------

-> We can invoke a functipn in js by calling it.

eg:

  function myFunction(a, b) {
  return a * b;
  }
  myFunction(10, 2); 
***
-> the function does not belong to any object. But in JavaScript 
   there is always a default global object.

-> In HTML the default global object is the HTML page
    itself, so the function above "belongs" to the HTML page.

-> In a browser the page object is the browser window. The function
     above automatically becomes a window function.
 
-> so myFunction() and window.myFunction() is the same function:

eg: 

function myFunction(a, b) {
  return a * b;
}
window.myFunction(10, 2); 

----------


***

 Invoking a Function with a Function Constructor:
 
If a function invocation is preceded with the new keyword, it
   is a constructor invocation.

It looks like you create a new function, but since JavaScript 
 functions are objects you actually create a new object:

// This is a function constructor:
function myFunction(arg1, arg2) {
  this.firstName = arg1;
  this.lastName  = arg2;
}

// This creates a new object
var x = new myFunction("John", "Doe");
x.firstName;      

-------------
                              Function Call:
                             --------------

-> Method Reuse: With the call() method, you can write a method 
     that can be used on different objects.

->  *** In JS all the functions are OBJECT METHODS:
   i.e If a function is not a method of a JavaScript object, 
        it is a function of the global object
   i.e if a function is not defined in Object it belongs to 
       global object . if it is defined in an object
       it belongs to that aobject.

The JavaScript call() Method:

-> The call() method is a predefined JavaScript method.

-> It can be used to invoke (call) a method with an owner object 
as an argument (parameter).

eg: 

 var person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
var person1 = {
  firstName:"John",
  lastName: "Doe"
}
var person2 = {
  firstName:"Mary",
  lastName: "Doe"
}
person.fullName.call(person1);  // Will return "John Doe"
person.fullName.call(person2);  // will return maryDoe
 i.e basially it takes arguments from person1
     objects and calls the method in Person object

***********
-> The call() Method with Arguments
   The call() method can accept arguments:

eg:

 var person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}
var person1 = {
  firstName:"John",
  lastName: "Doe"
}
person.fullName.call(person1, "Oslo", "Norway");


----------------------
           Function Apply:
            --------------

Method Reuse
-> With the apply() method, you can write a method that can be used
    on different objects.

-> js apply() method is similar to call() method the only differnece is 
  apply() can take arguments in array

eg:
 
var person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
var person1 = {
  firstName: "Mary",
  lastName: "Doe"
}
person.fullName.apply(person1);  // Will return "Mary Doe"

eg 2:

var person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}
var person1 = {
  firstName:"John",
  lastName: "Doe"
}
person.fullName.apply(person1, ["Oslo", "Norway"]);



----------------

   JS Static Method:
  -----------------

->The JavaScript provides static methods that belong to the class instead
 of an instance of that class. So, an instance is not required to call
 the static method. These methods are called directly on the class itself.

-> basically an object s not required for calling a method classname will
   be enough.

Points to rememeber:

-> The static keyword is used to declare a static method.
-> The static method can be of any name.
-> A class can contain more than one static method.
-> If we declare more than one static method with a similar name, 
   the JavaScript always invokes the last one.
-> The static method can be used to create utility functions.
-> We can use this keyword to call a static method within another
   static method.
-> We cannot use this keyword directly to call a static method within
   the non-static method. In such case, we can call the static method
    either using the class name or as the property of the constructor.


examples:

<script>  
class Test  
{  
  static display1()  
  {  
    return "static method is invoked"  
  }  
  static display2()  
  {  
    return "static method is invoked again"  
  }  
}  
document.writeln(Test.display1()+"<br>");  
document.writeln(Test.display2());  
</script> 

o/p: static method is invoked
static method is invoked again

-----------------------------------------------------------------------
 
                      JS Events:
                     ------------------

-> HTML events are "things" that happen to HTML elements.

-> When JavaScript is used in HTML pages, JavaScript can "react" on these events.


Eg: <button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>

eg2 : <button onclick="this.innerHTML = Date()">The time is?</button>


Common HTML Events:
-----------------------

onchange	An HTML element has been changed
onclick	        The user clicks an HTML element
onmouseover	The user moves the mouse over an HTML element
onmouseout	The user moves the mouse away from an HTML element
onkeydown	The user pushes a keyboard key
onload	        The browser has finished loading the page


--------------------------------------------------------------------
    
                 JS Strings: 
              ----------------

-> A JavaScript string is zero or more characters written inside quotes.

eg:   var x = "John Doe";
eg 2: var carName1 = "Volvo XC60";  // Double quotes
      var carName2 = 'Volvo XC60';  // Single quotes


eg 3:

-> You can use quotes inside a string, as long as they don't match 
  the quotes surrounding the string:

 var answer1 = "It's alright";
var answer2 = "He is called 'Johnny'";
var answer3 = 'He is called "Johnny"';

-> ** length of String: 

var txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
var sln = txt.length;

-> we can use these for quotes inside a string:

\'	'	Single quote
\"	"	Double quote
\\	\	Backslash

eg: 
var x = "We are the so-called \"Vikings\" from the north.";


-> Normally Strngs are primitive values but can be converted to objects as:

eg: 
var x = "John";
var y = new String("John");

// typeof x will return string
// typeof y will return object

-> ** x== y -> checks for the values inside x and y if both of them are same then returns
               true.

-> ** x===y  -> cheks for the type of object both of them holding is same then returns 
                true else false.

          String Methods:
      ---------------------------

indexof() : 

eg: var str = "Please locate where 'locate' occurs!";
    var pos = str.indexOf("locate");

o/P:  7

lastIndexOf() : 

eg: var str = "Please locate where 'locate' occurs!";
    var pos = str.lastIndexOf("locate");

o/p: 21

-> **Both indexOf(), and lastIndexOf() return -1 if the text is not found.

search() :
 
-> The search() method searches a string for a specified value and returns 
   the position of the match:

eg: var str = "Please locate where 'locate' occurs!";
    var pos = str.search("locate");

o/p : 7


-> Extracting String Parts: 
  -----------------------------

slice(start, end):

 eg: var str = "Apple, Banana, Kiwi";
     var res = str.slice(7, 13);

o/p: Banana

-> If a parameter is negative, the position is counted from the end of the string.

slice() :

eg; var str = "Apple, Banana, Kiwi";
    var res = str.slice(-12, -6);

o/p: Banana

-> If you remove the second parameter, the method will slice out the rest of the string:

substring():

var str = "Apple, Banana, Kiwi";
var res = str.substring(7, 13);

o/p: Banana

-> ** substring() is similar to slice().
       The difference is that substring() cannot accept negative indexes.
-> ** substr() is similar to slice()
      The difference is that the second parameter specifies the length 
       of the extracted part.

replace():

str = "Please visit Microsoft!";
var n = str.replace("Microsoft", "W3Schools");

-> toUpperCase():
-> toLowerCase():

concat():
---------

ex: var text1 = "Hello";
    var text2 = "World";
    var text3 = text1.concat(" ", text2);

ex 2: var text = "Hello" + " " + "World!";
      var text = "Hello".concat(" ", "World!");


trim():
-------

var str = "       Hello World!        ";
alert(str.trim());

**
Extracting String Characters
There are 3 methods for extracting string characters:

charAt(position)
charCodeAt(position)
Property access [ ]

-> ** A string can be converted into an array by using splirt method:

Eg: 
function myFunction() {
  var str = "a,b,c,d,e,f";
  var arr = str.split(",");
  document.getElementById("demo").innerHTML = arr[0];
}

o/p: a


************************************************************

-> javascript supports if, ifelse,if elseif conditions

if:
var a=20;  
if(a>10){  
document.write("value of a is greater than 10");  
}  

if else:
-------
var a=20;  
if(a%2==0){  
document.write("a is even number");  
}  
else{  
document.write("a is odd number");  
}  

if elseif
------------
var a=20;  
if(a==10){  
document.write("a is equal to 10");  
}  
else if(a==15){  
document.write("a is equal to 15");  
}  
else if(a==20){  
document.write("a is equal to 20");  
}  
else{  
document.write("a is not equal to 10, 15 or 20");  
}  

 o/p: a is equal to 20

----------------------------------------------------------
           Switch Statement:
           -----------------

<script>  
var grade='B';  
var result;  
switch(grade){  
case 'A':  
result="A Grade";  
break;  
case 'B':  
result="B Grade";  
break;  
case 'C':  
result="C Grade";  
break;  
default:  
result="No Grade";  
}  
document.write(result);  
</script>  

output: B Grade

-----------------------------------------------------------------
      JS loops:

-> There are four types of loops in JavaScript.

1.for loop
2.while loop
3.do-while loop
4.for-in loop

for loop:
----------

<script>  
for (i=1; i<=5; i++)  
{  
document.write(i + "<br/>")  
}  
</script>  


while loop:
--------------

<script>  
var i=11;  
while (i<=15)  
{  
document.write(i + "<br/>");  
i++;  
}  
</script>  

do while:
--------

var i=21;  
do{  
document.write(i + "<br/>");  
i++;  
}while (i<=25); 

o/p:

21
22
23
24
25


***********************************************************************************
                         JS Classes: 
                   -------------------------

class Syntax:
------------

class ClassName {
  constructor() { ... }
  method_1() { ... }
  method_2() { ... }
  method_3() { ... }
}

eg:

class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
}

myCar = new Car("Ford", 2014);
document.getElementById("demo").innerHTML =
myCar.name + " " + myCar.year;

o/p : Ford 2014


-> Points to remember;
    1. classes consists of methods
    2. cconstructor method is initialized when you call the class 
    3. we can access the methods in class by ussng objects
    4. we can also have static methods which can be called directly by class name
    5. object should be created after the class
   
-> Constructor:

The constructor method is a special method:

It has to have the exact name "constructor"
It is executed automatically when a new object is created
It is used to initialize object properties
If you do not define a constructor method, JavaScript will add an empty 
constructor method.


eg of class:
--------

class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;

  }
  age() {
    let date = new Date();
    return date.getFullYear() - this.year;
  }
}

let myCar = new Car("Ford", 2014);  --->creatng object of class

document.getElementById("demo").innerHTML =
"My car is " + myCar.age() + " years old.";


example 2: // sending arguments to method in class.
--------
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
  age(x) {
    return x - this.year;
  }
}

let date = new Date();
let year = date.getFullYear();

let myCar = new Car("Ford", 2014);

document.getElementById("demo").innerHTML=
"My car is " + myCar.age(year) + " years old.";
</script>

              Class Inheritence:
                -------------------

Class Inheritance: 
 -> To create a class inheritance, use the extends keyword.

 -> A class created with a class inheritance inherits all the methods 
    from another class:

example:
 -------

<script>
class Car {
  constructor(brand) {
    this.carname = brand;
  }
  present() {
    return 'I have a ' + this.carname;
  }
}

class Model extends Car {
  constructor(brand, mod) {
    super(brand);
    this.model = mod;
  }
  show() {
    return this.present() + ', it is a ' + this.model;
  }
}

let myCar = new Model("Ford", "Mustang");
document.getElementById("demo").innerHTML = myCar.show();
</script>



Getters and Setters in Class:
  ---------------------

  constructor(brand) {
    this.carname = brand;
  }
  get cnam() {
    return this.carname;
  }
  set cnam(x) {
    this.carname = x;
  }
}

let myCar = new Car("Ford");

document.getElementById("demo").innerHTML = myCar.cnam;


 Unnamed Class Expresiion:
---------------

-> A class can be expressed without assigmning any name to it.

ex: 
<script>  
var emp = class {  
  constructor(id, name) {  
    this.id = id;  
    this.name = name;  
  }  
};  
document.writeln(emp.name);  
</script> 

<script>  
var emp = class {  
  constructor(id, name) {  
    this.id = id;  
    this.name = name;  
  }  
};  
document.writeln(emp.name);  
</script> 


 Re-declaring Class:
 ---------------------

-> Unlike class declaration, the class expression allows us to re-declare the
   same class. So, if we try to declare the class more than one time, it throws 
    an error.

-> i.e basically we can use unanamed class expression again with same name:

ex:

<script>  
//Declaring class  
var emp=class   
  {  
//Initializing an object  
    constructor(id,name)  
    {  
      this.id=id;  
      this.name=name;  
    }  
//Declaring method      
detail()  
    {  
  document.writeln(this.id+" "+this.name+"<br>")  
    }  
  }  
//passing object to a variable   
var e1=new emp(101,"Martin Roy");  
var e2=new emp(102,"Duke William");  
e1.detail(); //calling method  
e2.detail();  
  
//Re-declaring class  
var emp=class   
  {  
//Initializing an object  
    constructor(id,name)  
    {  
      this.id=id;  
      this.name=name;  
    }  
    detail()  
    {  
  document.writeln(this.id+" "+this.name+"<br>")  
    }  
  }  
//passing object to a variable   
var e1=new emp(103,"James Bella");  
var e2=new emp(104,"Nick Johnson");  
e1.detail(); //calling method  
e2.detail();  
</script>



o/p:101 Martin Roy
102 Duke William
103 James Bella
104 Nick Johnson


---------------------------------------------------------------------------------
          
                      JS Encapsulation: 
                    ------------------------

-> The JavaScript Encapsulation is a process of binding the data (i.e. variables) 
   with the functions acting on that data. It allows us to control the data 
    and validate it. To achieve an encapsulation in JavaScript: -

-> Use var keyword to make data members private.
-> Use setter methods to set the data and getter methods to get that data.

example:

<script>  
class Student  
  {  
    constructor()  
    {  
       var name;  
       var marks;  
    }  
        getName()  
        {  
          return this.name;  
        }  	
      setName(name)  
      {  
        this.name=name;  
      }  
        
      getMarks()  
      {  
        return this.marks;  
      }  
    setMarks(marks)  
    {  
      this.marks=marks;  
    }  
  
    }  
    var stud=new Student();  
     stud.setName("John");  
     stud.setMarks(80);  
     document.writeln(stud.getName()+" "+stud.getMarks());  
</script>  

Output:

John 80

************************************************************************
                 JS Polymorphism:
                 -------------------
-> polymorphism  provides a way to perform a single action in different forms.

->  It provides an ability to call the same method on different JavaScript objects




	